{"ast":null,"code":"function check() {\n  // 投稿のDOMを取得している\n  var posts = document.getElementsByClassName(\"post\"); // 取得したDOMを配列に変換している\n\n  postsA = Array.from(posts);\n  postsA.forEach(function (post) {\n    if (post.getAttribute(\"data-load\") != null) {\n      return null;\n    }\n\n    post.setAttribute(\"data-load\", \"true\"); // 投稿をクリックした場合に実行する処理を定義している\n\n    post.addEventListener(\"click\", function (e) {\n      // どの投稿をクリックしたのか、カスタムデータを利用して取得している\n      var postId = post.getAttribute(\"data-id\"); // Ajaxに必要なオブジェクトを生成している\n\n      var XHR = new XMLHttpRequest(); // openでリクエストを初期化する\n\n      XHR.open(\"GET\", \"/posts/\".concat(postId), true); // レスポンスのタイプを指定する\n\n      XHR.responseType = \"json\"; // sendでリクエストを送信する\n\n      XHR.send(); // レスポンスを受け取った時の処理を記述する\n\n      XHR.onload = function () {\n        var item = XHR.response.post;\n\n        if (item.checked === true) {\n          // 既読状態であれば、灰色に変わるcssを適用するためのカスタムデータを追加している\n          post.setAttribute(\"data-check\", \"true\");\n        } else if (item.checked === false) {\n          // 未読状態であれば、カスタムデータを削除している\n          post.removeAttribute(\"data-check\");\n        }\n\n        if (XHR.status != 200) {\n          // レスポンスの HTTP ステータスを解析し、該当するエラーメッセージをアラートで表示するようにしている\n          alert(\"Error \".concat(XHR.status, \": \").concat(XHR.statusText)); // e.g. 404: Not Found\n        } else {\n          return null;\n        }\n      }; // リクエストが送信できなかった時\n\n\n      XHR.onerror = function () {\n        alert(\"Request failed\");\n      }; // イベントをキャンセルして、処理が重複しないようにしている\n\n\n      e.preventDefault();\n    });\n  });\n}\n\nsetInterval(check, 1000);","map":{"version":3,"sources":["/Users/nomurarikou/contents_exp_apps/AjaxApp/app/javascript/packs/checked.js"],"names":["check","posts","document","getElementsByClassName","postsA","Array","from","forEach","post","getAttribute","setAttribute","addEventListener","e","postId","XHR","XMLHttpRequest","open","responseType","send","onload","item","response","checked","removeAttribute","status","alert","statusText","onerror","preventDefault","setInterval"],"mappings":"AAAA,SAASA,KAAT,GAAiB;AACf;AACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,MAAhC,CAAd,CAFe,CAIf;;AACAC,EAAAA,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,KAAX,CAAT;AAEAG,EAAAA,MAAM,CAACG,OAAP,CAAe,UAAUC,IAAV,EAAgB;AAC3B,QAAIA,IAAI,CAACC,YAAL,CAAkB,WAAlB,KAAkC,IAAtC,EAA4C;AAC3C,aAAO,IAAP;AACD;;AACDD,IAAAA,IAAI,CAACE,YAAL,CAAkB,WAAlB,EAA+B,MAA/B,EAJ4B,CAK7B;;AACAF,IAAAA,IAAI,CAACG,gBAAL,CAAsB,OAAtB,EAA+B,UAACC,CAAD,EAAO;AACpC;AACA,UAAMC,MAAM,GAAGL,IAAI,CAACC,YAAL,CAAkB,SAAlB,CAAf,CAFoC,CAIpC;;AACA,UAAMK,GAAG,GAAG,IAAIC,cAAJ,EAAZ,CALoC,CAOpC;;AACAD,MAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,mBAA0BH,MAA1B,GAAoC,IAApC,EARoC,CAUpC;;AACAC,MAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB,CAXoC,CAapC;;AACAH,MAAAA,GAAG,CAACI,IAAJ,GAdoC,CAgBpC;;AACAJ,MAAAA,GAAG,CAACK,MAAJ,GAAa,YAAM;AACjB,YAAMC,IAAI,GAAGN,GAAG,CAACO,QAAJ,CAAab,IAA1B;;AACA,YAAIY,IAAI,CAACE,OAAL,KAAiB,IAArB,EAA2B;AACzB;AACAd,UAAAA,IAAI,CAACE,YAAL,CAAkB,YAAlB,EAAgC,MAAhC;AACD,SAHD,MAGO,IAAIU,IAAI,CAACE,OAAL,KAAiB,KAArB,EAA4B;AACjC;AACAd,UAAAA,IAAI,CAACe,eAAL,CAAqB,YAArB;AACD;;AAED,YAAIT,GAAG,CAACU,MAAJ,IAAc,GAAlB,EAAuB;AACrB;AACAC,UAAAA,KAAK,iBAAUX,GAAG,CAACU,MAAd,eAAyBV,GAAG,CAACY,UAA7B,EAAL,CAFqB,CAE4B;AAClD,SAHD,MAGO;AACL,iBAAO,IAAP;AACD;AACF,OAhBD,CAjBoC,CAkCpC;;;AACAZ,MAAAA,GAAG,CAACa,OAAJ,GAAc,YAAM;AAClBF,QAAAA,KAAK,CAAC,gBAAD,CAAL;AACD,OAFD,CAnCoC,CAuCpC;;;AACAb,MAAAA,CAAC,CAACgB,cAAF;AACD,KAzCD;AA0CD,GAhDD;AAiDA;;AAEFC,WAAW,CAAC7B,KAAD,EAAQ,IAAR,CAAX","sourcesContent":["function check() {\n  // 投稿のDOMを取得している\n  const posts = document.getElementsByClassName(\"post\");\n \n  // 取得したDOMを配列に変換している\n  postsA = Array.from(posts);\n \n  postsA.forEach(function (post) {\n      if (post.getAttribute(\"data-load\") != null) {\n       return null;\n     }\n     post.setAttribute(\"data-load\", \"true\");\n    // 投稿をクリックした場合に実行する処理を定義している\n    post.addEventListener(\"click\", (e) => {\n      // どの投稿をクリックしたのか、カスタムデータを利用して取得している\n      const postId = post.getAttribute(\"data-id\");\n \n      // Ajaxに必要なオブジェクトを生成している\n      const XHR = new XMLHttpRequest();\n \n      // openでリクエストを初期化する\n      XHR.open(\"GET\", `/posts/${postId}`, true);\n \n      // レスポンスのタイプを指定する\n      XHR.responseType = \"json\";\n \n      // sendでリクエストを送信する\n      XHR.send();\n \n      // レスポンスを受け取った時の処理を記述する\n      XHR.onload = () => {\n        const item = XHR.response.post;\n        if (item.checked === true) {\n          // 既読状態であれば、灰色に変わるcssを適用するためのカスタムデータを追加している\n          post.setAttribute(\"data-check\", \"true\");\n        } else if (item.checked === false) {\n          // 未読状態であれば、カスタムデータを削除している\n          post.removeAttribute(\"data-check\");\n        }\n \n        if (XHR.status != 200) {\n          // レスポンスの HTTP ステータスを解析し、該当するエラーメッセージをアラートで表示するようにしている\n          alert(`Error ${XHR.status}: ${XHR.statusText}`); // e.g. 404: Not Found\n        } else {\n          return null;\n        }\n      };\n      // リクエストが送信できなかった時\n      XHR.onerror = () => {\n        alert(\"Request failed\");\n      };\n \n      // イベントをキャンセルして、処理が重複しないようにしている\n      e.preventDefault();\n    });\n  });\n }\n \nsetInterval(check, 1000);\n"]},"metadata":{},"sourceType":"module"}